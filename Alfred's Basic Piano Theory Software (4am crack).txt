-------------Alfred's Basic---------------------Piano Theory Software---------A 4am crack                  2014-08-05---------------------------------------"Alfred's Basic Piano Theory Software"is a 1986 educational program by SandyFeldstein, developed by ElectronicCourseware Systems, and distributed byAlfred Publishing Company.COPYA fails miserably and immediately.EDD 4 bit copy works, and the copyboots and runs without complaint. Thistells me that there is some structuralprotection (i.e. data is stored on thedisk in a non-standard way) butprobably no secondary protection(e.g. an assembly language routine thatexecutes during the boot process todetermine whether it's booting from theoriginal disk).The original disk appears to boot amodified DOS 3.3. Listening to the diskdrive, it quickly moves out to track 2,then back to track 1, then track 0,then swings out to track $11 to readthe disk catalog and load the startupprogram (HELLO or similar). You canhear a lot just by listening.Let's see if my AUTOTRACE program cancapture the RWTS of the original disk.[S6,D1=original disk][S5,D1=my work disk]]PR#5...CAPTURING BOOT0...reboots slot 6......reboots slot 5...SAVING BOOT0CAPTURING BOOT1...reboots slot 6......reboots slot 5...SAVING BOOT1SAVING RWTSWell, that worked flawlessly. My workdisk first runs AUTOTRACE0, which setsup a minimal boot trace to capture thefirst sector of track 0 and saves it tothe file "BOOT0" (on my work disk, notthe original disk). If the first sectorlooks reasonably normal, it runsAUTOTRACE1, which sets up a moreinvolved boot trace to capture the restof track 0 and save it to the file"BOOT1". If *that* looks reasonablynormal, it saves the RWTS to a file,unimaginatively named "RWTS", which canbe loaded with Advanced Demuffin tocopy each track of the original disk toa duplicate with standard address/dataprologue/epilogue sequences.For the longest time, I thought thatAdvanced Demuffin would only load RWTSfiles from slot 6, drive 1. That'swhere the original disk was during boottracing, and that's where it needs tobe during demuffining (which is a realword that I totally just made up), andthat means I ended up swapping floppydisks like some kind of 13th centuryfriar.Then I re-read the Advanced Demuffintech notes (which I have included onalmost every work disk I've everproduced, but apparently never read intheir entirety). And I discovered thatit's trivial to tell Advanced Demuffinto load RWTS files from slot 5. Note toself: read the fine manual.[S6,D1=original disk][S6,D2=blank disk][S5,D1=my work disk]]PR#6]BRUN ADVANCED DEMUFFIN 1.1--> EXIT TO MONITOR*F1F:50      ; use slot 5*800G        ; resume--> LOAD NEW RWTS MODULE    At $B8, load "RWTS"    from drive 1--> EXIT TO MONITOR*F1F:60      ; use slot 6*800G        ; resume--> FORMAT TARGET DISK...grind grind grind...--> CONVERT DISKThis disk is 16 sectors, and thedefault options (copy the entire disk,all tracks, all sectors) don't need tobe changed.                 --v--ADVANCED DEMUFFIN 1.1  - COPYRIGHT 1983WRITTEN BY THE STACK -CORRUPT COMPUTING=======PRESS ANY KEY TO CONTINUE=======TRK:...................................+.5:    0123456789ABCDEF0123456789ABCDEF012SC0:...................................SC1:...................................SC2:...................................SC3:...................................SC4:...................................SC5:...................................SC6:...................................SC7:...................................SC8:...................................SC9:...................................SCA:...................................SCB:...................................SCC:...................................SCD:...................................SCE:...................................SCF:...................................=======================================16 SC $00,$00 TO $22,$0F BY $01 TO DRV2                 --^--The disk's own RWTS gave no read errorson any track. This is the power and thegenius of Advanced Demuffin. Every diskmust be able to read itself. So, let itread itself, then capture the data andwrite it out in a standard format.]PR#5...]CATALOG,S6,D2C1983 DSR^C#254004 FREE*A 013 HELLO T 003 HIGH SCORES*B 052 CEB*A 032 IG*A 034 TG*A 049 UG*B 034 TITLE2*B 002 EXPLOSION.OBJ*A 031 TC*A 040 NK*B 003 ROLAND1.OBJ*B 002 SOUND.OBJ*B 003 NOTETABLE.OBJ*A 034 SG*B 002 ANIMATOR.OBJ*B 002 FLE.OBJ*B 004 TABLES.OBJ*A 030 MG*B 002 MIDI 5/7/86.OBJ*A 044 CG*B 010 MUS CHAR SET*A 034 NN*A 030 INDEX*A 002 INITThat's a good sign. However, bootingthe demuffin'd disk directly justgrinds endlessly, because it still hasthe original RWTS on it. That is, itstill assumes that the data on the diskis stored in a non-standard format. Butthat's not true anymore, becauseAdvanced Demuffin just normalized thedisk format. So I need to patch theRWTS on my copy so it can read itself.For future reference (mostly mine),here's a nice chart of the memorylocations for all the prologues andepilogues in a DOS 3.3-shaped RWTS. Ifthe RWTS stores $B700 in T00,S01 (mostdo), then $B8xx will be in T00,S02;$B9xx in T00,S03; and so on.                0x |  read | write    ---------------+-------+-------                D5 | $B955 | $BC7A      prologue  AA | $B95F | $BC7F     /          96 | $B96A | $BC84    ADDRESS -------+-------+-------     \          DE | $B991 | $BCAE      epilogue  AA | $B99B | $BCB3                EB |       | $BCB8    ---------------+-------+-------                D5 | $B8E7 | $B853      prologue  AA | $B8F1 | $B858     /          AD | $B8FC | $B85D    DATA ----------+-------+-------     \          DE | $B935 | $B89E      epilogue  AA | $B93F | $B8A3                EB |       | $B8A8    ---------------+-------+-------(Memorize that chart; it will be on thefinal exam.)Using my trusty Copy ][+ sector editor,it appears there are only four bytesthat are different from the values youwould expect to find on a standard DOS3.3 disk:T00,S02,$A3 change "AD" to "AA"T00,S03,$3F change "AD" to "AA"T00,S03,$9B change "AD" to "AA"T00,S06,$B3 change "AD" to "AA"Success! The disk boots and runs withno complaint. There doesn't appear tobe any further copy protection.Quod erat liberandum.---------------------------------------A 4am crack                     No. 102------------------EOF------------------