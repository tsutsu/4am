--------------Riddle Magic-------------A 4am crack                  2014-09-15---------------------------------------"Riddle Magic" is a 1987 educationalprogram created by Learning Well,developed by Santa Barbara Softworksand SBProgramming, and distributed byMindscape, Inc. It comes on one double-sided disk and uses both sides.The original disk appears to be builton Apple Pascal. At least, the bootprocess looks like Pascal. It fills thescreen with null bytes, then clears thescreen and shows a solid cursor, thencontinues to load the program.COPYA fails miserably and immediatelyon side A. EDD 4 bit copy gives noread errors, but the copy just rebootsendlessly. Side B appears unprotected.In my experience, programs do notspontaneously reboot unless someonetells them to.Turning to my trusty Disk Fixer sectoreditor, I press "O" to enter the Input/Output Control, then set "CHECKSUMENABLED" to "NO" to ignore addressfield checksums and epilogue bytes).And behold!  All tracks and sectors arereadable.Based on my limited experience crackingother disks, I would guess that thisdisk has- Standard prologue bytes before the  address and data fields [otherwise  my sector editor would give me read  errors, even when ignoring checksums]- Non-standard epilogue bytes after the  address and data fields [otherwise  COPYA would work]- Some secondary protection [otherwise  the bit copy created with EDD 4 would  work]Given the (relatively) weak structuralprotection, I used to turn to the DOS3.3 master disk, patch the RWTS toignore checksums and epilogue bytes(changing $B942 from "SEC" to "CLC"),and run COPYA. Then, one fine day, andcompletely by accident, I came acrossan original disk with a bad sector. Isuppose this shouldn't surprise me.These floppies are decades old by now;it's amazing any of them work at all.The point is, I shouldn't be usingtools that ignore potentially seriousread errors. There are other tools,like Super Demuffin, that can convert adisk like this (with non-standardepilogue bytes) into a standard format.It requires figuring out what theactual epilogue bytes are, but it hasthe advantage of surfacing a read errorif the original disk actually has aread error.So... no more COPYA+B942:18 patch. Fromnow on, it's Super Demuffin or AdvancedDemuffin to convert disks to a standardformat. My AUTOTRACE program will onlyautomate extraction of the RWTS from aDOS 3.3-shaped bootloader, so let's seeif I can use Super Demuffin.Super Demuffin is a cracker's utilitybuilt on top of Locksmith Fast DiskCopy. It takes a disk that uses non-standard but uniform address and dataprologue and epilogue bytes, and itconverts it to a standard disk format.I've included a copy on my work disk.First, I'll need to find exactly whatthose epilogue bytes are. Turning tothe Copy ][+ nibble editor:                 --v--   COPY ][ PLUS BIT COPY PROGRAM 8.4(C) 1982-9 CENTRAL POINT SOFTWARE, INC.---------------------------------------TRACK: 03  START: 26A9  LENGTH: 015F2688: FF FF FF FF FF FF FF FF   VIEW2690: FF FF FF FF FF FF FF FF2698: FF FF FF FF FF FF FF FF26A0: FF FF FF FF FF FF FF FF26A8: FF D5 AA 96 FF FE AB AB  <-26A9         ^^^^^^^^     address prologue26B0: AA AA FE FF FF FF EB A7                  ^^^^^^^^              address epilogue26B8: F3 FC FF FF FF FF FF FF26C0: D5 AA AD 9A BC B2 EB DA      ^^^^^^^^   data prologue26C8: F4 E9 DC DF F2 DF BD BC---------------------------------------  A  TO ANALYZE DATA  ESC TO QUIT  ?  FOR HELP SCREEN  /  CHANGE PARMS  Q  FOR NEXT TRACK   SPACE TO RE-READ                 --^--(Not shown in the above screenshot, butthe data epilogue is also "FF FF EB".)Some quick inspection suggests that alltracks on the disk use the same non-standard address and data epiloguebytes. Now I can plug this informationinto Super Demuffin.When you first run Super Demuffin, itasks for the parameters of the originaldisk. In this case, the prologue bytesare the same, but the epilogues are "FFFF EB" instead of "DE AA EB".                 --v--      SUPER-DEMUFFIN AND FAST COPYModified by: The Saltine/Coast to Coast   Address prologue: D5 AA 96   Address epilogue: FF FF EB    DISK                     ^^^^^     ORIGINAL             *change from "DE AA"      Data prologue: D5 AA AD      Data epilogue: FF FF EB                     ^^^^^             *change from "DE AA" Ignore write errors while demuffining!  D - Edit parameters      <SPACE> - Advance to next parm      <RETURN> - Exit edit mode  R - Restore DOS 3.3 parameters  O - Edit Original disk's parameters  C - Edit Copy disk's parameters  G - Begin demuffin process                 --^--Pressing "G" switches to the LocksmithFast Disk Copy UI. It assumes that bothdisks are in slot 6, and that drive 1is the original and drive 2 is thecopy.[S6,D1=original disk, side A][S6,D2=blank disk]                 --v--     LOCKSMITH 7.0  FAST DISK BACKUP   R...................................   W***********************************HEX 00000000000000001111111111111111222TRK 0123456789ABCDEF0123456789ABCDEF012   0...................................   1...................................   2...................................   3...................................   4...................................   5...................................   6...................................   7...................................   8...................................   9...................................   A...................................   B...................................   C...................................   D...................................12 E...................................   F...................................[               ] PRESS [RESET] TO EXIT                 --^--There are two problems with this copy:1. Depending on how the original disk   was written, this copy may or may   not be able to read itself. I may   need to patch the disk's RWTS to   deal with the fact that the disk is   now in a standard format.2. Even if it can read itself, it won't   run. The copies I tried to make --   even the bit copies -- just rebooted   endlessly, which means there is some   code being executed during boot to   check if the disk is original.   (Hint: it's not.)It's time for a little boot tracing.[S6,D1=original disk, side A][S5,D1=my work disk]]PR#5CAPTURING BOOT0...reboots slot 6......reboots slot 5...SAVING BOOT0]CALL -151*800<2800.28FFM*801L; only supports botting from certain; slots0801-   E0 70       CPX   #$700803-   B0 04       BCS   $08090805-   E0 40       CPX   #$400807-   B0 39       BCS   $0842; unsupported slot -- print an error; message and give up0809-   BD 88 C0    LDA   $C088,X080C-   20 20 08    JSR   $0820080F-   A2 00       LDX   #$000811-   BD 25 08    LDA   $0825,X0814-   09 80       ORA   #$800816-   20 FD FB    JSR   $FBFD0819-   E8          INX081A-   E0 1D       CPX   #$1D081C-   D0 F3       BNE   $0811081E-   F0 FE       BEQ   $081E0820-   A9 0A       LDA   #$0A0822-   4C 24 FC    JMP   $FC24...; this is a loop that reuses the disk; controller ROM routine to read; several more sectors from track 00842-   8A          TXA0843-   85 43       STA   $430845-   4A          LSR0846-   4A          LSR0847-   4A          LSR0848-   4A          LSR0849-   09 C0       ORA   #$C0084B-   85 0D       STA   $0D084D-   A9 5C       LDA   #$5C084F-   85 0C       STA   $0C0851-   AD 00 08    LDA   $08000854-   C9 06       CMP   #$06; break out of read loop0856-   B0 0A       BCS   $08620858-   69 02       ADC   #$02085A-   8D 00 08    STA   $0800085D-   E6 3D       INC   $3D; jump to ROM to read the sector into; the memory page given in zero page; $3D (this jumps back to $801 when; it finishes, which is why this read; loop is actually a loop)085F-   6C 0C 00    JMP   ($000C); out of the read loop now0862-   A9 00       LDA   #$00; don't know what this does yet0864-   4C 78 0B    JMP   $0B78This is where I need to interrupt theboot process.*9600<C600.C6FFM; set up callback after boot0 breaks; out of the initial read loop96F8-   A9 05       LDA   #$0596FA-   8D 65 08    STA   $086596FD-   A9 97       LDA   #$9796FF-   8D 66 08    STA   $0866; start the boot9702-   4C 01 08    JMP   $0801; callback is here --; relocate the boot1 code to hi-res; page 1 so it will survive a reboot9705-   A2 04       LDX   #$049707-   A0 00       LDY   #$009709-   B9 00 08    LDA   $0800,Y970C-   99 00 28    STA   $2800,Y970F-   C8          INY9710-   D0 F7       BNE   $97099712-   EE 0B 97    INC   $970B9715-   EE 0E 97    INC   $970E9718-   CA          DEX9719-   D0 EE       BNE   $9709; turn off slot 6 drive motor971B-   AD E8 C0    LDA   $C0E8; reboot to my work disk in slot 5971E-   4C 00 C5    JMP   $C500*BSAVE TRACE1,A$9600,L$121*9600G...reboots slot 6......reboots slot 5...]BSAVE BOOT1 0800-0BFF,A$2800,L$400]CALL -151*800<2800.2BFFMPicking up where I left off, $0864 wasjumping to $0B78 to do... something.*B78L; Put an RTS instruction at $0801 so; we can JSR to the disk controller ROM; routine to read sectors. This is a; little odd, because we just finished; reading sectors by looping back to; $0801. Usually boot0 code uses one; method or the other, but not both.0B78-   A9 60       LDA   #$600B7A-   8D 01 08    STA   $0801; set up sector to read0B7D-   A9 05       LDA   #$050B7F-   85 3D       STA   $3D0B81-   A5 0D       LDA   $0D; self-modifying code here -- sets up; the next instruction to call the; read routine depending on the boot; slot0B83-   8D 88 0B    STA   $0B880B86-   20 5C 00    JSR   $005C; jump to the code we just read0B89-   4C 00 0C    JMP   $0C00Time for a deeper boot trace.*9600<C600.C6FFM; same as first boot trace96F8-   A9 05       LDA   #$0596FA-   8D 65 08    STA   $086596FD-   A9 97       LDA   #$9796FF-   8D 66 08    STA   $0866; start the boot9702-   4C 01 08    JMP   $0801; first callback is here -- set up the; second callback9705-   A9 12       LDA   #$129707-   8D 8A 0B    STA   $0B8A970A-   A9 97       LDA   #$97970C-   8D 8B 0B    STA   $0B8B; continue to boot970F-   4C 78 0B    JMP   $0B78; second callback is here --; relocate the code at $0C00 to hi-res; page 1 so it will survive a reboot9712-   A0 00       LDY   #$009714-   B9 00 0C    LDA   $0C00,Y9717-   99 00 2C    STA   $2C00,Y971A-   C8          INY971B-   D0 F7       BNE   $9714; turn off drive motor and reboot to; my work disk971D-   AD E8 C0    LDA   $C0E89720-   4C 00 C5    JMP   $C500*BSAVE TRACE2,A$9600,L$123*9600G...reboots slot 6......reboots slot 5...]BSAVE BOOT1 0C00-0CFF,A$2C00,L$100]CALL -151*C00<2C00.2CFFMWhat evil lurks in the hearts of menwho mix sector read methods...*C00L; usually holds current track (so the; RWTS knows whether it needs to adjust; the drive head, and in which; direction)0C00-   A9 00       LDA   #$000C02-   8D 78 04    STA   $0478; move drive head to track $220C05-   A9 44       LDA   #$440C07-   20 A3 0A    JSR   $0AA3; initialize some zero page locations0C0A-   A9 00       LDA   #$000C0C-   A2 F0       LDX   #$F00C0E-   9A          TXS0C0F-   95 00       STA   $00,X0C11-   E8          INX0C12-   D0 FB       BNE   $0C0F0C14-   A9 0A       LDA   #$0A0C16-   85 FC       STA   $FC0C18-   A6 2B       LDX   $2B; turn on drive motor manually and go; into read mode -- this is always; suspicious unless it's in the depths; of legitimate RWTS code (which this; is not)0C1A-   BD 89 C0    LDA   $C089,X0C1D-   BD 8E C0    LDA   $C08E,X0C20-   A9 80       LDA   #$800C22-   85 FD       STA   $FD0C24-   C6 FD       DEC   $FD; looks like the beginnings of a nibble; check, with the failure path leading; to $0CA30C26-   F0 7B       BEQ   $0CA3; subroutine finds address header ("D5; AA 96") and skips over address field0C28-   20 B0 0C    JSR   $0CB0; if that didn't work, give up0C2B-   B0 76       BCS   $0CA30C2D-   A5 F9       LDA   $F90C2F-   C9 0F       CMP   #$0F0C31-   D0 F1       BNE   $0C240C33-   A0 00       LDY   #$00; Search for a specific sequence of; nibbles in the "dead zone" between; the address field and data field.; This area is normally not important,; so COPYA didn't copy it precisely; because normal disks don't care.; (Actually, it's even more evil than; that, because the original disk is; written with timing bits in specific; non-standard places between the; nibbles in the dead zone. This code; not only requires the right nibbles; in the right order, it reads them; just slightly slower than normal. So; the timing bits need to be in the; right places too, or else this code; will read the wrong nibble values; while it's out of sync. This will; trip up even the best bit copiers.; And you can forget about making a; disk image for emulators -- those; don't store timing bits at all.)0C35-   BD 8C C0    LDA   $C08C,X0C38-   10 FB       BPL   $0C350C3A-   88          DEY; give up0C3B-   F0 66       BEQ   $0CA30C3D-   C9 D5       CMP   #$D50C3F-   D0 F4       BNE   $0C350C41-   A0 00       LDY   #$000C43-   BD 8C C0    LDA   $C08C,X0C46-   10 FB       BPL   $0C430C48-   88          DEY; give up0C49-   F0 58       BEQ   $0CA30C4B-   C9 E7       CMP   #$E7; give up0C4D-   D0 F4       BNE   $0C430C4F-   BD 8C C0    LDA   $C08C,X0C52-   10 FB       BPL   $0C4F0C54-   C9 E7       CMP   #$E7; give up0C56-   D0 4B       BNE   $0CA30C58-   BD 8C C0    LDA   $C08C,X0C5B-   10 FB       BPL   $0C580C5D-   C9 E7       CMP   #$E7; give up0C5F-   D0 42       BNE   $0CA3; kill some time to get out of sync; with the "proper" start of nibbles0C61-   BD 8D C0    LDA   $C08D,X0C64-   A0 10       LDY   #$100C66-   24 80       BIT   $80; now start looking for nibbles that; don't really exist (except they do,; because we're out of sync and reading; timing bits as data)0C68-   BD 8C C0    LDA   $C08C,X0C6B-   10 FB       BPL   $0C680C6D-   88          DEY; give up0C6E-   F0 33       BEQ   $0CA30C70-   C9 EE       CMP   #$EE0C72-   D0 F4       BNE   $0C680C74-   EA          NOP0C75-   EA          NOP; store nibble sequence that follows0C76-   A0 07       LDY   #$070C78-   BD 8C C0    LDA   $C08C,X0C7B-   10 FB       BPL   $0C780C7D-   99 F0 00    STA   $00F0,Y0C80-   EA          NOP0C81-   88          DEY0C82-   10 F4       BPL   $0C780C84-   A2 03       LDX   #$030C86-   A9 00       LDA   #$000C88-   A8          TAY0C89-   85 F8       STA   $F8; wait, it gets better -- this disk; actually uses the raw nibble data it; stores in this "dead zone" as the; decryption key for part of boot10C8B-   A9 09       LDA   #$090C8D-   85 F9       STA   $F90C8F-   B5 F0       LDA   $F0,X0C91-   51 F8       EOR   ($F8),Y0C93-   91 F8       STA   ($F8),Y0C95-   88          DEY0C96-   D0 F7       BNE   $0C8F; restore drive head to track 00C98-   A6 2B       LDX   $2B0C9A-   98          TYA0C9B-   20 A3 0A    JSR   $0AA3; continue normal execution0C9E-   A6 2B       LDX   $2B0CA0-   4C 67 08    JMP   $0867; count down and eventually give up and; reboot through the low-level reset; vector in ROM0CA3-   C6 FC       DEC   $FC0CA5-   F0 03       BEQ   $0CAA0CA7-   4C 20 0C    JMP   $0C200CAA-   EE F4 03    INC   $03F40CAD-   6C FC FF    JMP   ($FFFC)I can't just skip over this nibblecheck, because it's decrypting part ofthe code that follows. I need to let itrun at least once and capture thedecrypted code in memory.*9600<C600.C6FFM; set up first callback96F8-   A9 05       LDA   #$0596FA-   8D 65 08    STA   $086596FD-   A9 97       LDA   #$9796FF-   8D 66 08    STA   $0866; start boot9702-   4C 01 08    JMP   $0801; first callback -- set up second; callback9705-   A9 12       LDA   #$129707-   8D 8A 0B    STA   $0B8A970A-   A9 97       LDA   #$97970C-   8D 8B 0B    STA   $0B8B; continue boot970F-   4C 78 0B    JMP   $0B78; second callback -- set up third; callback after nibble check runs and; decrypts code at $09009712-   A9 1F       LDA   #$1F9714-   8D A1 0C    STA   $0CA19717-   A9 97       LDA   #$979719-   8D A2 0C    STA   $0CA2; continue boot971C-   4C 00 0C    JMP   $0C00; third callback -- relocate decrypted; code from $0900 to $2900 so it will; survive a reboot971F-   A0 00       LDY   #$009721-   B9 00 09    LDA   $0900,Y9724-   99 00 29    STA   $2900,Y9727-   C8          INY9728-   D0 F7       BNE   $9721; turn off drive motor and reboot to my; work disk972A-   AD E8 C0    LDA   $C0E8972D-   4C 00 C5    JMP   $C500*BSAVE TRACE3,A$9600,L$130*9600G...reboots slot 6......reboots slot 5...]BSAVE BOOT1 0900-07FF DECRYPTED, A$2900,L$100Now I need to write the decrypted $0900page to disk. But where? Well, the file"BOOT1 0800-0BFF" contains the originalversion of the $0900 page. Loading thatinto memory and listing it, then firingup my trusty Disk Fixer sector editor,I found the sector I need to overwrite:track $00, sector $0E.08C0-   A9 08       LDA   #$0808C2-   A0 E8       LDY   #$E808C4-   20 D9 03    JSR   $03D908C7-   60          RTS...     slot 6,drive 1         vv vv08E8- 01 60 01 00 00 0E FB 08                  ^^ ^^           track $00,sector $0E08F0- 00 09 00 00 02 00 FE 60      ^^^^^       ^^      $0900     write08F8- 01 00 00 00 01 EF D8 00*BSAVE WRITE BOOT1 DECRYPTED,A$8C0,L$40[S6,D1=demuffin'd copy]*8C0G...write write write...I have no further need for this nibblecheck. Its sole purpose in life waschecking that the disk was original anddecrypting the code at $0900. I have noneed for the former, and I have justimplemented a permanent solution forthe latter. All that remains is toremove the call. Tracing back, boot0jumped to $0B78, which read a singlesector into $0C00, which performed thenibble check and decryption and jumpedback to... $0867!0864-   4C 78 0B    JMP   $0B78...0B89-   4C 00 0C    JMP   $0C00...0CA0-   4C 67 08    JMP   $0867The original code at $0864 was actually"STA $0478" (which was moved to $0C02).This instruction is important becauseit's used by the Pascal RWTS to keeptrack of where the drive head is. (Thedisk may grind if it's not initializedproperly.)Thus:T00,S00,$64 change "4C 78 0B"                to "8D 78 04"Quod erat liberandum.---------------------------------------A 4am crack                     No. 132------------------EOF------------------