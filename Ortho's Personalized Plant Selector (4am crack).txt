--Ortho's Personalized Plant Selector--A 4am crack                  2015-12-14---------------------------------------Name: Ortho's Personalized Plant  SelectorVersion: 1.0Genre: productivityYear: 1984Credits:  Design: Ortho Information Services  Development: Virtual Combinatics  User's Guide: Rex Wolf, COMPAGEPublisher: Chevron ChemicalMedia: double-sided 5.25-inch floppyOS: ProDOS 1.1Previous cracks: noneSide A is protected but bootable.Side B is unprotected but unbootable.Life is like that.This has not been a haiku.                   ~               Chapter 0 In Which Various Automated Tools Fail          In Interesting WaysCOPYA  immediate disk read errorLocksmith Fast Disk Backup  unable to read any trackEDD 4 bit copy (no sync, no count)  no errors, but copy only boots as far  as ProDOS title screen, then gives  "RELOCATION / CONFIGURATION ERROR"Copy ][+ nibble editor  modified prologues and epilogues on  every track (except T00,S00)  address = AA D5 AB / DE AB  data    = AA D5 EB / ED AA EB                 --v--   COPY ][ PLUS BIT COPY PROGRAM 8.4(C) 1982-9 CENTRAL POINT SOFTWARE, INC.---------------------------------------TRACK: 05  START: 32EA  LENGTH: 015F32D0: 96 96 96 96 96 96 96 96   VIEW32D8: 96 96 ED AA EB FD D2 D2            ^^^^^^^^         data epilogue32E0: D2 D2 DD A5 AE BF FF FF32E8: FF FF DB B7 AD BF D7 AB32F0: F7 BD EB AF ED AA D5 AB  <-32F5                     ^^^^^^^^                 address prologue32F8: FF FE AA AF AF AB FA FA      ^^^^^ ^^^^^ ^^^^^ ^^^^^      v=255 t=$05 s=$0B chksm3300: DE AB E4 FF 9E D3 FC DB      ^^^^^ address epilogue3308: B7 AD BF D7 AB AA D5 EB                     ^^^^^^^^                  data prologue3310: AE EC D3 F3 BF DE F4 D9---------------------------------------  A  TO ANALYZE DATA  ESC TO QUIT  ?  FOR HELP SCREEN  /  CHANGE PARMS  Q  FOR NEXT TRACK   SPACE TO RE-READ                 --^--Disk Fixer  T00,S00 is a custom bootloader  ["O" -> "Input/Output Control"]    set address prologue to "AA D5 AB"    set address epilogue to "DE AB EB"    set data prologue to "AA D5 EB"    set data epilogue to "ED AA EB"  Success! all tracks readable, except    T00,S0A and T00,S0B  I see references to PRODOS, but with    those sectors unreadable on track    $00, a straight conversion may be    difficultWhy didn't COPYA work?  modified prologues/epiloguesWhy didn't Locksmith FDB work?  modified prologues/epiloguesWhy didn't my EDD copy work?  I don't know. The error is a standard  ProDOS message, but it could easily  have been triggered manually after a  failed nibble check.                   ~               Chapter 1    In Which We Catch A Lucky <brk>[S6,D1=original disk]]PR#6...boots to main menu...<Ctrl-Reset> dumps me to the monitorwith ProDOS still in memory. No resetvector protection at all.; copy F8 ROM to RAM bank 1*C089 C089 N F800<F800.FFFFMC089- B0C089- B0; read/write RAM bank 1*C08B C08BC08B- B0C08B- B0Now I can inspect the modified ProDOSin memory. Here's the relevant part ofthe RWTS:*D398L; entry point to find address prologueD398-   A0 FC       LDY   #$FCD39A-   8C 6B D3    STY   $D36BD39D-   C8          INYD39E-   D0 05       BNE   $D3A5D3A0-   EE 6B D3    INC   $D36BD3A3-   F0 68       BEQ   $D40D; address prologue #1 can be $D5 or $AAD3A5-   BD 8C C0    LDA   $C08C,XD3A8-   10 FB       BPL   $D3A5D3AA-   C9 D5       CMP   #$D5D3AC-   F0 02       BEQ   $D3B0D3AE-   C9 AA       CMP   #$AAD3B0-   D0 EB       BNE   $D39D; address prologue #2 can be $AA or $D5D3B2-   BD 8C C0    LDA   $C08C,XD3B5-   10 FB       BPL   $D3B2D3B7-   C9 AA       CMP   #$AAD3B9-   F0 02       BEQ   $D3BDD3BB-   C9 D5       CMP   #$D5D3BD-   D0 EB       BNE   $D3AA; address prologue #3 can be $96 or $ABD3BF-   BD 8C C0    LDA   $C08C,XD3C2-   10 FB       BPL   $D3BFD3C4-   C9 96       CMP   #$96D3C6-   F0 04       BEQ   $D3CCD3C8-   C9 AB       CMP   #$ABD3CA-   D0 DE       BNE   $D3AAThis explains how the program disk canbe protected but the data disk (side B)can be copyable. The RWTS is really twoRWTSs in one, accepting either(*) thestandard "D5 AA 96" or the nonstandard"AA D5 AB" address prologue.(*) Well actually(+), there are eight    possible sequences, since each item    in the sequence is chosen from two    possible nibbles, and 2^3 = 8.(+) Q: How did the pedant die?    A: He fell down a well actually.There is similar two-for-one code tomatch the address epilogue:*D3F1L; address epilogue #1 can be... $DED3F1-   BD 8C C0    LDA   $C08C,XD3F4-   10 FB       BPL   $D3F1D3F6-   C9 DE       CMP   #$DED3F8-   F0 02       BEQ   $D3FCD3FA-   C9 DE       CMP   #$DED3FC-   D0 0F       BNE   $D40D; address epilogue #2 can be $AA or $ABD3FE-   BD 8C C0    LDA   $C08C,XD401-   10 FB       BPL   $D3FED403-   C9 AA       CMP   #$AAD405-   F0 04       BEQ   $D40BD407-   C9 AB       CMP   #$ABD409-   D0 02       BNE   $D40DD40B-   18          CLCD40C-   60          RTSD40D-   38          SECD40E-   60          RTSDitto for the data prologue:*D443LD443-   A0 20       LDY   #$20D445-   88          DEYD446-   F0 42       BEQ   $D48A; data prologue #1 can be $D5 or $AAD448-   BD 8C C0    LDA   $C08C,XD44B-   10 FB       BPL   $D448D44D-   C9 D5       CMP   #$D5D44F-   F0 02       BEQ   $D453D451-   C9 AA       CMP   #$AAD453-   D0 F0       BNE   $D445; data prologue #2 can be $AA or $D5D455-   BD 8C C0    LDA   $C08C,XD458-   10 FB       BPL   $D455D45A-   C9 AA       CMP   #$AAD45C-   F0 02       BEQ   $D460D45E-   C9 D5       CMP   #$D5D460-   D0 EB       BNE   $D44DD462-   EA          NOP; data prologue #3 can be $AD or $EBD463-   BD 8C C0    LDA   $C08C,XD466-   10 FB       BPL   $D463D468-   C9 AD       CMP   #$ADD46A-   F0 04       BEQ   $D470D46C-   C9 EB       CMP   #$EBD46E-   D0 DD       BNE   $D44DBut where it really gets interesting isin the data epilogue.*D4DDLD4DD-   A6 3E       LDX   $3E; data epilogue #1 can be $DE or $EDD4DF-   BD 8C C0    LDA   $C08C,XD4E2-   10 FB       BPL   $D4DFD4E4-   C9 DE       CMP   #$DE; if it's $DE (standard), branch all; the way forward to $D4FF to signal; success (i.e. don't ever check the; second epilogue)D4E6-   F0 17       BEQ   $D4FF; if it's $ED (nonstandard), things get; weirdD4E8-   C9 ED       CMP   #$EDD4EA-   D0 16       BNE   $D502; $D526 is just an "RTS", so we're just; burning cycles hereD4EC-   20 26 D5    JSR   $D526; burn some more cyclesD4EF-   EA          NOPD4F0-   EA          NOPD4F1-   EA          NOP; look at data latch (no loop)D4F2-   BD 8C C0    LDA   $C08C,X; if high bit is still set, branch to; failure path (sets the carry)D4F5-   30 0B       BMI   $D502D4F7-   EA          NOP; otherwise burn a nibble and clear the; carry to signal successD4F8-   BD 8C C0    LDA   $C08C,XD4FB-   10 FB       BPL   $D4F8D4FD-   A9 00       LDA   #$00D4FF-   18          CLCD500-   F0 01       BEQ   $D503D502-   38          SECD503-   68          PLAD504-   A0 55       LDY   #$55D506-   91 44       STA   ($44),YD508-   60          RTSTo understand the genius of this, somebackground is in order. Each bit ondisk takes 4 CPU cycles to come aroundas the disk is spinning. That means weneed to read an 8-bit nibble every 32cycles. (The data latch will hold thelast value for 4 more cycles, so we canspend an absolute maximum of 36 cyclesfetching any one nibble. Of coursewe'll need to make up that time later;it's not free. Ain't nothing free.)If the first nibble of the epilogue hasa timing bit after it, that will burnanother 4 cycles and delay everythingelse. $D4EC does a JSR to an RTS, whichrequires 6 cycles to call and 6 more toreturn. Then there are three NOP codes,which burns another 6 cycles. So by thetime we check the data latch at $D4F2,we've "wasted" so much time that we candistinguish whether the first nibble ofthe epilogue had a timing bit after itor not. Timing bit = original disk;lack of timing bit = unauthorized copy.And that explains why my EDD bit copyfailed: it didn't preserve the timingbits after the $ED nibble in the dataprologue. It sets the carry, so thecaller thinks the sector is bad and wehear the familiar disk grinding. Higherup the call chain, ProDOS says, "Whoa!I can't even read the disk catalog tofind the first .SYSTEM file! I'm out."It displays the generic "RELOCATION /CONFIGURATION ERROR" and gives up.There was never a nibble check, per se;the structure of the disk itself isdesigned to foil bit copiers.                   ~               Chapter 2In Which We Catch An Even Luckier BreakSo how am I going to crack this? I havethe protected version of ProDOS inmemory. Can I reuse that somehow?It turns out I can, in a ridiculouslyeasy way. This program -- how can I putthis politely -- it's possible thatthere was some outsourcing of concerns,and it's possible that the variousparties involved (development team thatwrote it, QA team that tested it, anddisk distribution house that added thecopy protection and mastered it) --well, have you ever read the comicstrip Dilbert? I'm not saying therewere pointy haired bosses involved, butthere is a fairly glaring hole in thisdisk's copy protection.Here is the main menu:                 --v--             Program Selector        Ortho Plant Selector        Planting Calendar        Note Pad        Calculator        Define Growing Region        Program Set-up    >>> Catalog of files <<<       Point to the desired program       with the cursor control keys,       select by pressing RETURN.     ________________________________    Ortho's Personalized Plant Selector                 --^--Selecting "Catalog of files" takes meto A GENERAL PURPOSE PROGRAM SELECTORthat displays a full catalog of the(protected) program disk.                 --v--     __________________________________      Catalog path: /AE/_      PRODOS          SYS      AE.SYSTEM       SYS      AE.DEF          SYS      REGION.OBJ      BIN      ORTHO           SYS      CONFIG          SYS      ORTHO.OBJ       BIN      CALCULATOR      SYS      CAL.RES         BIN      REGION          SYS      ORTHO2          BIN      ZIP.MASTER      BIN      AE64.SYSTEM     SYS      AE128.SYSTEM    SYS      CAL             SYS      CAL.OBJ         BIN    ___________________________________    Ortho's Personalized Plant Selector                 --^--The catalog path (on the top line) iseditable; if I overwrite it entirelywith the pathname of another disk, Ican SELECT AND EXECUTE ARBITRARYPROGRAMS from any disk.Like, say, this one:[S6,D2=Copy II Plus 8.4]                 --v--     __________________________________      Catalog path: /COPYIIPLUS8.4/      PRODOS          SYS      UTIL.SYSTEM     SYS      BITCOPY.SYSTEM  SYS      PARM.KEY        TXT      PARM.DATA       TXT    ___________________________________    Ortho's Personalized Plant Selector                 --^--Selecting UTIL.SYSTEM, I can launchCopy II Plus. The protected version ofProDOS is still in memory, and Copy IIPlus 8.4 will use it to catalog andread from any available ProDOS disks --including the protected original disk.Hooray for abstractions!   _____________________  |  /!\ Important /!\  |_____________  |                                   |  | If you're going to go to all the  |  | trouble of adding OS-level copy   |  | protection that makes bit copies  |  | essentially impossible, don't let |  | the user run arbitrary programs   |  | after your OS is in memory.       |  |___________________________________|Now I can copy all the files from theoriginal (protected) disk to a blank(unprotected) disk.[S6,D2=blank disk][Copy II Plus 8.4]  [FORMAT DISK]    [PRODOS]      [SLOT 6, DRIVE 2]        VOLUME NAME = "BACKUP"  [COPY]    [FILES]      SOURCE DISK = SLOT 6, DRIVE 1      TARGET DISK = SLOT 6, DRIVE 2      select all files (*.*)[eject original disk from S6,D1]  [RENAME]    [VOLUME]      [SLOT 6, DRIVE 2]        VOLUME NAME = "AE" (to match        the original disk)[S6,D1=freshly made copy]]PR#6...works...I don't even need to swap the PRODOSfile with a clean copy. The dual RWTScan already read standard formatteddisks, so no RWTS patches are required.Quod erat liberandum.---------------------------------------A 4am crack                     No. 518------------------EOF------------------