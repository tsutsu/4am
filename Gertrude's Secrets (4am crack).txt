-----------Gertrude's Secrets----------A 4am crack                  2014-03-26---------------------------------------Gertrude's Secrets is 1982 educationalgame distributed by The LearningCompany.Booting the original disk sounds like anormal DOS 3.3, complete with trackseeking to track 2, then 1, then 0,then swinging to the middle of the diskto read the catalog track. It evendisplays a BASIC prompt during boot, asif it's loading a HELLO program.However, the disk is uncopyable by anyautomated method. COPYA failsinstantly. EDD4 bit copy gives readerrors on track $13 and up (whichappear to be entirely unformatted). Thecopy that EDD4 creates can boot, but itonly gets as far as loading DOS anddisplaying the BASIC prompt beforeclearing the screen and rebooting. Mytrusty Copy ][+ 5.5 sector editor canread tracks $00 through $12, though,once I change the RWTS option to "DOS3.3 patched" (which ignores addressfield checksums and epiloguebytes). Track $11 does appear tocontain a disk catalog.My initial hypothesis: 6-2 nibbleencoding scheme; custom RWTS withstandard prologue bytes ("D5 AA 96" and"D5 AA AD") but non-standard epiloguebytes; a CALL in the HELLO program thatexecutes a nibble check.I can use COPYA from the DOS 3.3 masterdisk to copy the data from the originaldisk to a blank disk with standardepilogue bytes. By booting the DOS 3.3master disk and changing $B942 from SEC($38) to CLC ($18), I can create a "nochecksum" RWTS that ignores epiloguebytes on read but respects them onwrite.I will need to make one additionalmodification. By default, COPYA copiesthe entire disk, tracks $00 through$22. There is no option in the UI tochange this, so I will need to manuallyBLOAD COPY.OBJ0 and modify it to stopreading and writing after track $12.[S6D1=DOS 3.3 master disk]Load COPYA and its helper program intomemory:]LOAD COPYA]BLOAD COPY.OBJ0Stop COPYA from reloading COPY.OBJ0:]70Patch COPY.OBJ0 in memory to stopreading (and writing -- two separatepatches) after track $12:]CALL-151*302:13*35F:13Patch DOS to ignore epilogue errors:*B942:18And go:*3D0G]RUN[S6D1=Gertrude's Secrets original disk][S6D2=blank disk]This produces a copy that is readableby unmodified DOS 3.3. The copy caneven read itself (since the only thingthat's changed is the epilogue bytesthat it was ignoring in the firstplace). But it still displays the samebehavior as the copy I made with EDD4:it loads DOS, displays the BASICprompt, then reboots.However, further investigation revealssomething very interesting...[S6D1=DOS 3.3 master disk][S6D2=Gertrude's Secrets copy]]PR#6]CATALOG,D2DISK VOLUME 254 A 002 HELLO B 055 SECRET WORLD B 009 SECRETSGOOSE.O B 034 ADV #108 B 005 SECRETFONT B 002 SECRETSRANDOM.O B 015 SECRETSHELLO&TITLER.OBJ0 B 004 SECRETSHELLO.O B 026 SECRETCODE.O B 002 FRESHSTART.O B 055 SECRET WORLD.IIE B 033 SECRETLOGO]RUN HELLOLo and behold, the game loads and runs!That means that the last part of myhypothesis was incorrect. Whateversecondary protection causes the copy toreboot is not part of the HELLOprogram; it's part of the custom DOS.At this point, I can recreate a workingcopy of the game by initializinganother blank disk with DOS 3.3 andcopying these files over with a filecopier. What about the nibble check?Don't even care.OK, OK, I care a little. But it's easyenough to find.[S5D1=my work disk][S6D1=non-working copy]]PR#5]CALL -151*8600<C600.C6FFM*86F8:AD E8 C0 4C 59 FF*BSAVE TRACE0,A$8600,L$FE*8600G...*2000<800.8FFM*C500G...]BSAVE GERTRUDE'S SECRETS T0S0, A$2000,L$100Boot0 code looks pretty normal until itdoes a direct JMP $8C0 instead of theusual indirect JMP ($8FD) after loadingthe RWTS.08C0-   8E E9 B7    STX   $B7E908C3-   6C FD 08    JMP   ($08FD)Hmm, OK. I can interrupt the boot at$8C0 and save the RWTS to my work disk.]PR#5]BLOAD TRACE0]CALL -151; set up callback to my routine86F8-   A9 4C       LDA   #$4C86FA-   8D C0 08    STA   $08C086FD-   A9 0A       LDA   #$0A86FF-   8D C1 08    STA   $08C18702-   A9 87       LDA   #$878704-   8D C2 08    STA   $08C28707-   4C 01 08    JMP   $0801; copy RWTS to safe location870A-   A2 09       LDX   #$09870C-   A0 00       LDY   #$00870E-   B9 00 B7    LDA   $B700,Y8711-   99 00 27    STA   $2700,Y8714-   C8          INY8715-   D0 F7       BNE   $870E8717-   EE 10 87    INC   $8710871A-   EE 13 87    INC   $8713871D-   CA          DEX871E-   D0 EE       BNE   $870E; reboot my work disk8720-   AD E8 C0    LDA   $C0E88723-   4C 00 C5    JMP   $C500*BSAVE TRACE1,A$8600,L$126*8600G...]BSAVE GERTRUDE'S SECRETS RWTS, A$2700,L$900The very first line at $B700 issuspicious:B700-   20 00 BB    JSR   $BB00I've learned from previous cracks (andfrom actually reading "Beneath AppleDOS" instead of, you know, just staringat it on my bookshelf) that, in astandard DOS-3.3-derived RWTS, the areafrom $BB00 to $BC55 is overwritten byduring every disk read. So why is thereexecutable code there? Let's find out.BB00-   A0 00       LDY   #$00BB02-   B9 00 BB    LDA   $BB00,YBB05-   99 00 02    STA   $0200,YBB08-   88          DEYBB09-   D0 F7       BNE   $2B02BB0B-   60          RTSWell that's definitely suspicious.Relocating yourself into the inputbuffer at $200? Seriously, who doesthat?I'm guessing that the first instructionafter this is the entry point, so afterrelocation that would be $020C.; seek to track $11 and set reset; vector to something unfriendly020C-   20 CF 02    JSR   $02CF020F-   A9 0A       LDA   #$0A0211-   85 2A       STA   $2A; initialize disk motor0213-   AE E9 B7    LDX   $B7E90216-   BD 89 C0    LDA   $C089,X0219-   BD 8E C0    LDA   $C08E,X021C-   A9 C7       LDA   #$C7021E-   85 48       STA   $480220-   A9 02       LDA   #$020222-   85 49       STA   $490224-   A9 80       LDA   #$800226-   85 29       STA   $290228-   C6 29       DEC   $29022A-   F0 67       BEQ   $0293; position disk head to where the; nibble check should be022C-   20 44 B9    JSR   $B944022F-   B0 62       BCS   $02930231-   A5 2D       LDA   $2D0233-   C9 0D       CMP   #$0D0235-   D0 F1       BNE   $02280237-   A0 00       LDY   #$000239-   BD 8C C0    LDA   $C08C,X023C-   10 FB       BPL   $0239023E-   88          DEY023F-   F0 52       BEQ   $0293; check for "D5 * E7 E7 E7 * EE"0241-   C9 D5       CMP   #$D50243-   D0 F4       BNE   $02390245-   A0 00       LDY   #$000247-   BD 8C C0    LDA   $C08C,X024A-   10 FB       BPL   $0247024C-   88          DEY024D-   F0 44       BEQ   $0293024F-   C9 E7       CMP   #$E70251-   D0 F4       BNE   $02470253-   BD 8C C0    LDA   $C08C,X0256-   10 FB       BPL   $02530258-   C9 E7       CMP   #$E7025A-   D0 37       BNE   $0293025C-   BD 8C C0    LDA   $C08C,X025F-   10 FB       BPL   $025C0261-   C9 E7       CMP   #$E70263-   D0 2E       BNE   $02930265-   BD 8D C0    LDA   $C08D,X0268-   A0 10       LDY   #$10026A-   24 06       BIT   $06026C-   BD 8C C0    LDA   $C08C,X026F-   10 FB       BPL   $026C0271-   88          DEY0272-   F0 1F       BEQ   $02930274-   C9 EE       CMP   #$EE0276-   D0 F4       BNE   $026C; check for nibble sequence stored; in reverse order at $2C70278-   A0 07       LDY   #$07027A-   BD 8C C0    LDA   $C08C,X027D-   10 FB       BPL   $027A027F-   D1 48       CMP   ($48),Y0281-   D0 10       BNE   $02930283-   88          DEY0284-   10 F4       BPL   $027A; if we made it this far, the nibble; check passed0286-   A9 80       LDA   #$800288-   8D 4E 9E    STA   $9E4E028B-   A9 A1       LDA   #$A1028D-   8D 4F 9E    STA   $9E4F0290-   4C 4D 9E    JMP   $9E4DThat last section at $0286..$0290 isinteresting. After the nibble checkpasses, it replaces two bytes at $9E4Eand $9E4F, then immediately jumps to$9E4D. That implies that this nibblecheck is called via an unconditionaljump, not a JSR. With the Copy ][+sector editor, I searched the disk for"4C 0C 02" and found one reference ontrack 00, sector 0B, byte $4D. I wonderif I can just change those two bytes tobypass the nibble check altogether andturn this into a working copy:T00,S0B,$4E: change $0C to $80T00,S0B,$4F: change $02 to $A1Success!                   ~It turns out that several othereducational games use this same copyprotection, right down to the byteoffset of the call to the nibble check:- Bumble Games- Juggles' Rainbow- Moptown Parade- Reader Rabbit- Wizard of WordsThe only difference is that they usethe entire disk, so no unformattedtracks, so no need to twiddle bits inCOPY.OBJ0.So consider those cracked as well.---------------------------------------A 4am crack                  2014-03-26------------------EOF------------------