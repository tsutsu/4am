-------------Fraction-oids-------------A 4am crack                  2015-03-27---------------------------------------Name: Fraction-oidsGenre: educationalYear: 1989Author: Methods & SolutionsPublisher: Mindplay, Inc.Media: single-sided 5.25-inch floppyOS: customOther versions: none (preserved here  for the first time)Similar cracks: Math Magic (no. 282)                   ~               Chapter 0 In Which Various Automated Tools Fail          In Interesting WaysCOPYA  reads several passes then fails with  a disk read errorLocksmith Fast Disk Backup  reads every track except $0C; copy  hangs on bootEDD 4 bit copy (no sync, no count)  no errors, but copy prints a cryptic  message ("DISK ERROR  35W") and hangsCopy ][+ nibble editor  T0C is mostly self-sync bytes ($FF),  no sector structureDisk Fixer  unable to read track $0C with any  combination of parametersWhy didn't COPYA work?  track $0C is intentionally unreadableWhy didn't Locksmith FDB work?  probably stuck in an infinite loop  trying to read the unreadable T0CWhy didn't my EDD copy work?  definitely a nibble check during bootNext steps:  1. Boot trace  2. Find nibble check and disable it  3. There is no step 3 (I hope)                   ~               Chapter 1  In Which We Quickly Find Ourselves        In Unfamiliar Territory[S6,D1=original disk][S5,D1=my work disk]]PR#5...CAPTURING BOOT0...reboots slot 6......reboots slot 5...SAVING BOOT0CAPTURING BOOT1...reboots slot 6......reboots slot 5...SAVING BOOT1SAVING RWTS]BLOAD BOOT1,A$2600]CALL -151*FE89G FE93G     ; disconnect DOS*B600<2600.2FFFM ; move RWTS into place*B700L; right off the bat, I'm lost -- this; bootloader is not at all what I was; expectingB700-   20 06 B7    JSR   $B706B703-   4C 00 B5    JMP   $B500$B500 isn't loaded yet (boot0 loadsboot1 into $B600..$BFFF), so it must bethe next stage of the boot which isloaded by the subroutine at $B706.B706-   AE 27 B7    LDX   $B727B709-   CA          DEXB70A-   8A          TXAB70B-   18          CLCB70C-   6D 2D B7    ADC   $B72DB70F-   C9 10       CMP   #$10B711-   30 08       BMI   $B71BB713-   EE 2C B7    INC   $B72CB716-   38          SECB717-   E9 10       SBC   #$10B719-   10 F4       BPL   $B70FB71B-   8D 2D B7    STA   $B72DB71E-   AE 27 B7    LDX   $B727B721-   CA          DEXB722-   8A          TXAB723-   18          CLCB724-   4C 3D B7    JMP   $B73DThis code didn't make a lot of senseto me until I looked at the bytesstarting at $B727:B727- 02B728- 01 60 01 00 01 00 37 B7B730- 00 B5 00 00 01 00 00 60B738- 01 00 01 EF D8Aha! That's an RWTS parameter table(starting at $B728), and this is all amulti-sector read loop.B73D-   6D 31 B7    ADC   $B731B740-   8D 31 B7    STA   $B731B743-   78          SEIB744-   A0 28       LDY   #$28B746-   A9 B7       LDA   #$B7B748-   20 00 BD    JSR   $BD00B74B-   AE 29 B7    LDX   $B729B74E-   90 63       BCC   $B7B3; check RWTS command ($02 = write)B750-   AD 34 B7    LDA   $B734B753-   C9 02       CMP   #$02; read ($01) and seek ($00) will branchB755-   D0 42       BNE   $B799...B799-   58          CLI; turn off drive motor (this is usually; taken care of within the RWTS, but; maybe this RWTS doesn't?)B79A-   BD 88 C0    LDA   $C088,XB79D-   CE 2D B7    DEC   $B72DB7A0-   10 08       BPL   $B7AAB7A2-   CE 2C B7    DEC   $B72CB7A5-   A9 0F       LDA   #$0FB7A7-   8D 2D B7    STA   $B72DB7AA-   CE 31 B7    DEC   $B731B7AD-   CE 27 B7    DEC   $B727B7B0-   D0 91       BNE   $B743B7B2-   60          RTSB7B3-   A9 00       LDA   #$00B7B5-   8D 35 B7    STA   $B735B7B8-   4C 99 B7    JMP   $B799There doesn't appear to be any funnybusiness. It's a bit convoluted, but itjust loads sectors from a given trackuntil $B727 hits 0.Let's see what's at $B500.*9600<C600.C6FFM; set up callback #1 after boot096F8-   A9 4C       LDA   #$4C96FA-   8D 4A 08    STA   $084A96FD-   A9 0A       LDA   #$0A96FF-   8D 4B 08    STA   $084B9702-   A9 97       LDA   #$979704-   8D 4C 08    STA   $084C; start the boot9707-   4C 01 08    JMP   $0801; (callback #1) set up callback #2; instead of jumping to $B500970A-   A9 4C       LDA   #$4C970C-   8D 03 B7    STA   $B703970F-   A9 1C       LDA   #$1C9711-   8D 04 B7    STA   $B7049714-   A9 97       LDA   #$979716-   8D 05 B7    STA   $B705; continue the boot9719-   4C 00 B7    JMP   $B700; copy the two sectors we read to lower; memory so it will survive a reboot971C-   A0 00       LDY   #$00971E-   B9 00 B5    LDA   $B500,Y9721-   99 00 25    STA   $2500,Y9724-   B9 00 B6    LDA   $B600,Y9727-   99 00 26    STA   $2600,Y972A-   C8          INY972B-   D0 F1       BNE   $971E; reboot to my work disk972D-   4C 00 C5    JMP   $C500*BSAVE TRACE,A$9600,L$130*9600G...reboots slot 6......reboots slot 5...]BSAVE BOOT1 B500-B6FF,A$2500,L$200                   ~               Chapter 2      In Which We Find Ourselves          Behind Enemy Lines]CALL -151*B500<2500.26FFM*B500LB500-   20 00 B6    JSR   $B600*B600L; set RWTS parameters (starts at $B728)B600-   A2 60       LDX   #$60; track $0CB602-   A9 0C       LDA   #$0CB604-   8D 2C B7    STA   $B72CB607-   A9 01       LDA   #$01B609-   8D 27 B7    STA   $B727B60C-   A9 00       LDA   #$00; slow down IIgs (has no effect on; other machines)B60E-   AD 36 C0    LDA   $C036B611-   29 7F       AND   #$7FB613-   8D 36 C0    STA   $C036; seek only, no readB616-   A9 00       LDA   #$00B618-   8D 34 B7    STA   $B734; sector $00B61B-   8D 2D B7    STA   $B72D; disable last line of RWTS that turns; off the drive motorB61E-   A9 60       LDA   #$60B620-   8D 4D BE    STA   $BE4DB623-   58          CLI; execute RWTS seekB624-   20 06 B7    JSR   $B706; restore RWTS codeB627-   A9 BD       LDA   #$BDB629-   8D 4D BE    STA   $BE4DB62C-   B0 65       BCS   $B693; look for a magic bitstreamB62E-   BD 8C C0    LDA   $C08C,XB631-   10 FB       BPL   $B62EB633-   48          PHAB634-   68          PLAB635-   C9 D5       CMP   #$D5B637-   D0 F5       BNE   $B62EB639-   A0 00       LDY   #$00B63B-   8C BD B6    STY   $B6BDB63E-   BD 8C C0    LDA   $C08C,XB641-   10 FB       BPL   $B63EB643-   C9 D5       CMP   #$D5; success branchesB645-   F0 0F       BEQ   $B656B647-   C9 F7       CMP   #$F7B649-   D0 01       BNE   $B64CB64B-   C8          INYB64C-   18          CLCB64D-   6D BD B6    ADC   $B6BDB650-   8D BD B6    STA   $B6BDB653-   4C 3E B6    JMP   $B63E; success path continues hereB656-   98          TYAB657-   F0 E0       BEQ   $B639B659-   BD 8C C0    LDA   $C08C,XB65C-   10 FB       BPL   $B659B65E-   48          PHAB65F-   68          PLAB660-   C9 FF       CMP   #$FFB662-   F0 F5       BEQ   $B659B664-   C9 D5       CMP   #$D5; branch = failureB666-   F0 2F       BEQ   $B697B668-   A0 05       LDY   #$05B66A-   BD 8C C0    LDA   $C08C,XB66D-   10 FB       BPL   $B66AB66F-   48          PHAB670-   68          PLAB671-   88          DEYB672-   D0 F6       BNE   $B66AB674-   BD 8C C0    LDA   $C08C,XB677-   10 FB       BPL   $B674B679-   48          PHAB67A-   68          PLAB67B-   C9 FF       CMP   #$FFB67D-   F0 F5       BEQ   $B674B67F-   C9 D5       CMP   #$D5; branch = failureB681-   D0 14       BNE   $B697B683-   BD 8C C0    LDA   $C08C,XB686-   10 FB       BPL   $B683B688-   C9 FF       CMP   #$FF; branch = failureB68A-   D0 0B       BNE   $B697B68C-   AD BD B6    LDA   $B6BDB68F-   C9 10       CMP   #$10; branch = failureB691-   D0 04       BNE   $B697; success falls through to here -- turn; off drive motor and exit (no flags)B693-   BD 88 C0    LDA   $C088,XB696-   60          RTS; failure path is hereB697-   A2 20       LDX   #$20B699-   A9 A0       LDA   #$A0B69B-   99 FF 1F    STA   $1FFF,YB69E-   C8          INYB69F-   D0 FA       BNE   $B69BB6A1-   EE 9D B6    INC   $B69DB6A4-   CA          DEXB6A5-   D0 F4       BNE   $B69B; display error message (I saw this on; my failed EDD bit copy)B6A7-   20 2F FB    JSR   $FB2FB6AA-   20 58 FC    JSR   $FC58B6AD-   A0 0E       LDY   #$0EB6AF-   B9 BE B6    LDA   $B6BE,YB6B2-   49 BB       EOR   #$BBB6B4-   99 B4 05    STA   $05B4,YB6B7-   88          DEYB6B8-   10 F5       BPL   $B6AFB6BA-   78          SEI; loop foreverB6BB-   30 FE       BMI   $B6BBThe nibble check at $B600 has no sideeffects. On success, it exits withoutsetting or clearing any flags; onfailure, it never returns. Replacingthe first instruction at $B600 with an"RTS" will bypass it.T01,S01,$00 change "A2" to "60"Quod erat liberandum.---------------------------------------A 4am crack                     No. 283------------------EOF------------------